{
	"name": "dflMovies",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DST_Movies",
						"type": "DatasetReference"
					},
					"name": "MoviesDL"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_MoviesProcessado",
						"type": "DatasetReference"
					},
					"name": "MoviesDLDestination"
				}
			],
			"transformations": [
				{
					"name": "selectCorrecaoNome"
				},
				{
					"name": "filmesMaioresdoAno1950"
				},
				{
					"name": "DerivadaGenero"
				},
				{
					"name": "RankFilmesPorRatings"
				},
				{
					"name": "aggregageRatings"
				}
			],
			"scriptLines": [
				"source(output(",
				"          movie as string,",
				"          title as string,",
				"          genres as string,",
				"          year as string,",
				"          Rating as string,",
				"          {Rotton Tomato} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     limit: 100,",
				"     ignoreNoFilesFound: false) ~> MoviesDL",
				"MoviesDL select(mapColumn(",
				"          movie,",
				"          title,",
				"          genres,",
				"          year,",
				"          Rating,",
				"          {Rottan Tomato} = {Rotton Tomato}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectCorrecaoNome",
				"selectCorrecaoNome filter(toInteger(year) > 1950) ~> filmesMaioresdoAno1950",
				"filmesMaioresdoAno1950 derive(primeiroGenero = iif(locate(\"|\", genres) > 1, left(genres, locate(\"|\", genres) -1 ), genres)) ~> DerivadaGenero",
				"DerivadaGenero window(over(primeiroGenero,",
				"          year),",
				"     asc({Rottan Tomato}, true),",
				"     RatingsRank = rank()) ~> RankFilmesPorRatings",
				"RankFilmesPorRatings aggregate(groupBy(primeiroGenero,",
				"          year),",
				"     MediaRatings = avg(toInteger({Rottan Tomato})),",
				"          MaiorRating = first(title),",
				"          {Ultimo Filme} = last(title),",
				"          {Quantidade de Filmes} = count()) ~> aggregageRatings",
				"aggregageRatings sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['MoviesDL_processado.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> MoviesDLDestination"
			]
		}
	}
}